{"ast":null,"code":"export function distance(lat1, lon1, lat2, lon2) {\n  var R = 6371; // km\n\n  var dLat = toRad(lat2 - lat1);\n  var dLon = toRad(lon2 - lon1);\n  var lat1 = toRad(lat1);\n  var lat2 = toRad(lat2);\n  var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  var d = R * c;\n  return d;\n} // Converts numeric degrees to radians\n\nfunction toRad(Value) {\n  return Value * Math.PI / 180;\n}","map":{"version":3,"sources":["F:/Anderson/Fullstack Lab/Abril 2020/prj/lib/geo.js"],"names":["distance","lat1","lon1","lat2","lon2","R","dLat","toRad","dLon","a","Math","sin","cos","c","atan2","sqrt","d","Value","PI"],"mappings":"AAAA,OAAO,SAASA,QAAT,CAAkBC,IAAlB,EAAwBC,IAAxB,EAA8BC,IAA9B,EAAoCC,IAApC,EAA0C;AAC7C,MAAIC,CAAC,GAAG,IAAR,CAD6C,CAC/B;;AACd,MAAIC,IAAI,GAAGC,KAAK,CAACJ,IAAI,GAAGF,IAAR,CAAhB;AACA,MAAIO,IAAI,GAAGD,KAAK,CAACH,IAAI,GAAGF,IAAR,CAAhB;AACA,MAAID,IAAI,GAAGM,KAAK,CAACN,IAAD,CAAhB;AACA,MAAIE,IAAI,GAAGI,KAAK,CAACJ,IAAD,CAAhB;AAEA,MAAIM,CAAC,GAAGC,IAAI,CAACC,GAAL,CAASL,IAAI,GAAG,CAAhB,IAAqBI,IAAI,CAACC,GAAL,CAASL,IAAI,GAAG,CAAhB,CAArB,GACJI,IAAI,CAACC,GAAL,CAASH,IAAI,GAAG,CAAhB,IAAqBE,IAAI,CAACC,GAAL,CAASH,IAAI,GAAG,CAAhB,CAArB,GAA0CE,IAAI,CAACE,GAAL,CAASX,IAAT,CAA1C,GAA2DS,IAAI,CAACE,GAAL,CAAST,IAAT,CAD/D;AAEA,MAAIU,CAAC,GAAG,IAAIH,IAAI,CAACI,KAAL,CAAWJ,IAAI,CAACK,IAAL,CAAUN,CAAV,CAAX,EAAyBC,IAAI,CAACK,IAAL,CAAU,IAAIN,CAAd,CAAzB,CAAZ;AACA,MAAIO,CAAC,GAAGX,CAAC,GAAGQ,CAAZ;AACA,SAAOG,CAAP;AACH,C,CAED;;AACA,SAAST,KAAT,CAAeU,KAAf,EAAsB;AAClB,SAAOA,KAAK,GAAGP,IAAI,CAACQ,EAAb,GAAkB,GAAzB;AACH","sourcesContent":["export function distance(lat1, lon1, lat2, lon2) {\r\n    var R = 6371; // km\r\n    var dLat = toRad(lat2 - lat1);\r\n    var dLon = toRad(lon2 - lon1);\r\n    var lat1 = toRad(lat1);\r\n    var lat2 = toRad(lat2);\r\n\r\n    var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n        Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);\r\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    var d = R * c;\r\n    return d;\r\n}\r\n\r\n// Converts numeric degrees to radians\r\nfunction toRad(Value) {\r\n    return Value * Math.PI / 180;\r\n}"]},"metadata":{},"sourceType":"module"}